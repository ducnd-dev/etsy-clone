{% comment %}
  Etsy-style Search Results Grid Component
  Usage: {% render 'etsy-search-grid', results: search.results, context: 'search' %}
  
  Parameters:
  - results: Array of search results (products, articles, pages)
  - context: Context for styling ('search')
  - container_id: Custom container ID for JavaScript targeting
{% endcomment %}

{% assign container_id = container_id | default: 'search-results-grid' %}
{% assign products = results | where: 'object_type', 'product' %}
{% assign articles = results | where: 'object_type', 'article' %}
{% assign pages = results | where: 'object_type', 'page' %}

<!-- Search filters and sorting -->
<div class="mb-8 flex flex-col md:flex-row justify-between items-start md:items-center border-b border-gray-200 pb-4">
    <!-- Filter buttons -->
  <div class="flex flex-wrap gap-2 mb-4 md:mb-0" data-search-filters>
    <button class="filter-btn px-4 py-2 rounded-full text-sm font-medium bg-etsy-orange text-white hover:bg-etsy-orange/90 active" data-filter="all">
      {{ 'search_results.all_results' | t }} ({{ results.size }})
    </button>
    
    <button class="filter-btn px-4 py-2 rounded-full text-sm font-medium bg-white border border-gray-300 text-gray-700 hover:bg-gray-50 hover:border-etsy-orange hover:text-etsy-orange transition-all duration-300" data-filter="product">
      {{ 'search_results.items' | t }} (<span data-product-count>{{ products.size }}</span>)
    </button>
    
    {% if articles.size > 0 %}
      <button class="filter-btn px-4 py-2 rounded-full text-sm font-medium bg-white border border-gray-300 text-gray-700 hover:bg-gray-50 hover:border-etsy-orange hover:text-etsy-orange transition-all duration-300" data-filter="article">
        {{ 'search_results.articles' | t }} (<span data-article-count>{{ articles.size }}</span>)
      </button>
    {% endif %}
    
    {% if pages.size > 0 %}
      <button class="filter-btn px-4 py-2 rounded-full text-sm font-medium bg-white border border-gray-300 text-gray-700 hover:bg-gray-50 hover:border-etsy-orange hover:text-etsy-orange transition-all duration-300" data-filter="page">
        {{ 'search_results.pages' | t }} (<span data-page-count>{{ pages.size }}</span>)
      </button>
    {% endif %}

    <!-- Additional product filters -->
    <div class="relative inline-block text-left" data-filter-dropdown>      <button class="px-4 py-2 rounded-full text-sm font-medium bg-white border border-gray-300 text-gray-700 hover:bg-gray-50 hover:border-etsy-orange hover:text-etsy-orange flex items-center transition-all duration-300" data-filter-dropdown-toggle>
        <span>{{ 'collections.filters.more_filters' | t }}</span>
        <svg class="ml-2 h-4 w-4 transition-transform duration-200" fill="currentColor" viewBox="0 0 20 20" data-filter-dropdown-arrow>
          <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
        </svg>
      </button>
      
      <!-- Filter dropdown menu -->
      <div class="hidden absolute left-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black/5 z-10" data-filter-dropdown-menu>
        <div class="py-1" role="menu">
          <button class="filter-btn block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-etsy-orange transition-colors" data-filter="sale" role="menuitem">
            <span class="flex items-center">
              <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
              </svg>
              On Sale
            </span>
          </button>
          <button class="filter-btn block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-etsy-orange transition-colors" data-filter="free-shipping" role="menuitem">
            <span class="flex items-center">
              <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
              </svg>
              Free Shipping
            </span>
          </button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Sort dropdown -->
  <div class="relative inline-block text-left" data-sort-dropdown>
    <button class="px-4 py-2 rounded-full text-sm font-medium bg-white border border-gray-300 text-gray-700 hover:bg-gray-50 hover:border-etsy-orange hover:text-etsy-orange flex items-center transition-all duration-300" data-sort-dropdown-toggle>
      <span data-sort-label>Sort by: Relevancy</span>
      <svg class="ml-2 h-4 w-4 transition-transform duration-200" fill="currentColor" viewBox="0 0 20 20" data-sort-dropdown-arrow>
        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
      </svg>
    </button>
    
    <!-- Sort dropdown menu -->
    <div class="hidden absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-white ring-1 ring-black/5 z-10" data-sort-dropdown-menu>
      <div class="py-1" role="menu">
        <button class="sort-btn block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-etsy-orange transition-colors" data-sort="relevancy" role="menuitem">
          Relevancy
        </button>
        <button class="sort-btn block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-etsy-orange transition-colors" data-sort="price-low-high" role="menuitem">
          Price: Low to High
        </button>
        <button class="sort-btn block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-etsy-orange transition-colors" data-sort="price-high-low" role="menuitem">
          Price: High to Low
        </button>
        <button class="sort-btn block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-etsy-orange transition-colors" data-sort="newest" role="menuitem">
          Newest
        </button>
      </div>
    </div>
  </div>
  
</div>

<!-- Search results grid -->
<div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-x-4 gap-y-8" id="{{ container_id }}" data-search-grid>
  {% for item in results %}
    {% if item.object_type == 'product' %}
      <!-- Product results -->
      <div class="group search-item product-item" 
           data-item-type="product"
           data-product-sale="{% if item.compare_at_price > item.price %}true{% else %}false{% endif %}"
           data-product-free-shipping="{% if item.metafields.etsy.free_shipping %}true{% else %}false{% endif %}"
           data-product-price="{{ item.price }}"
           data-product-created="{{ item.created_at | date: '%s' }}">
        
        <!-- Product image -->
        <div class="aspect-w-4 aspect-h-3 rounded-lg overflow-hidden bg-gray-100">
          <a href="{{ item.url }}">
            {% if item.featured_image != blank %}
              <img 
                src="{{ item.featured_image | image_url: width: 350 }}" 
                alt="{{ item.featured_image.alt | escape }}" 
                width="350" height="262"
                class="w-full h-full object-center object-cover group-hover:opacity-75 transition-opacity duration-200"
                loading="lazy">
            {% else %}
              <div class="w-full h-full flex items-center justify-center bg-gray-200">
                <span class="text-gray-500">No image</span>
              </div>
            {% endif %}
          </a>
        </div>
        
        <!-- Product info -->
        <div class="mt-4">
          <h3 class="text-sm text-gray-700 font-medium">
            <a href="{{ item.url }}" class="hover:text-etsy-orange transition-colors">
              {{ item.title | truncate: 50 }}
            </a>
          </h3>
          
          <!-- Shop name (vendor) -->
          <p class="mt-1 text-sm text-gray-500">{{ item.vendor }}</p>
          
          <!-- Rating snippet -->
          {% render 'etsy-product-rating', product: item %}
          
          <!-- Sale and price -->
          <div class="mt-1 flex items-center">
            {% if item.compare_at_price > item.price %}
              <span class="text-sm font-medium text-red-600">Sale</span>
              <span class="ml-2 text-sm line-through text-gray-500">{{ item.compare_at_price | money }}</span>
            {% endif %}
            <span class="{% if item.compare_at_price > item.price %}ml-2{% endif %} text-sm font-medium text-gray-900">
              {{ item.price | money }}
            </span>
          </div>
          
          <!-- Free shipping if applicable -->
          {% if item.metafields.etsy.free_shipping %}
            <p class="mt-1 text-xs text-etsy-orange">FREE shipping</p>
          {% endif %}
          
          <!-- Number sold -->
          {% if item.metafields.etsy.items_sold %}
            <p class="mt-1 text-xs text-gray-500">{{ item.metafields.etsy.items_sold }} sold</p>
          {% endif %}
        </div>
      </div>
      
    {% elsif item.object_type == 'article' %}
      <!-- Article results -->
      <div class="col-span-1 md:col-span-2 bg-gray-50 rounded-lg p-6 search-item article-item" data-item-type="article">
        <h3 class="text-lg font-medium text-etsy-dark">
          <a href="{{ item.url }}" class="hover:text-etsy-orange transition-colors">{{ item.title }}</a>
        </h3>
        {% if item.published_at %}
          <p class="mt-1 text-sm text-gray-500">{{ item.published_at | date: "%B %d, %Y" }}</p>
        {% endif %}
        {% if item.summary != blank %}
          <p class="mt-2 text-sm text-gray-600 line-clamp-3">{{ item.summary | strip_html | truncate: 150 }}</p>
        {% endif %}
        <div class="mt-3">
          <a href="{{ item.url }}" class="text-sm font-medium text-etsy-orange hover:text-etsy-orange-dark transition-colors">
            Read more →
          </a>
        </div>
      </div>
      
    {% elsif item.object_type == 'page' %}
      <!-- Page results -->
      <div class="col-span-1 md:col-span-2 bg-blue-50 rounded-lg p-6 search-item page-item" data-item-type="page">
        <h3 class="text-lg font-medium text-etsy-dark">
          <a href="{{ item.url }}" class="hover:text-etsy-orange transition-colors">{{ item.title }}</a>
        </h3>
        {% if item.content != blank %}
          <p class="mt-2 text-sm text-gray-600 line-clamp-3">{{ item.content | strip_html | truncate: 150 }}</p>
        {% endif %}
        <div class="mt-3">
          <a href="{{ item.url }}" class="text-sm font-medium text-etsy-orange hover:text-etsy-orange-dark transition-colors">
            View page →
          </a>
        </div>
      </div>
    {% endif %}
  {% else %}
    <!-- Empty state -->
    <div class="col-span-full text-center py-16">
      <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
      </svg>
      <h3 class="text-lg font-medium text-gray-900 mb-2">No results found</h3>
      <p class="text-gray-500">Try searching for something else or check your spelling.</p>
    </div>
  {% endfor %}
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Search Results Filter & Sort Functionality
  const gridContainer = document.getElementById('{{ container_id }}');
  const filterContainer = document.querySelector('[data-search-filters]');
  const sortDropdown = document.querySelector('[data-sort-dropdown]');
  const filterDropdown = document.querySelector('[data-filter-dropdown]');
  
  if (!gridContainer) return;
  
  const filterButtons = filterContainer?.querySelectorAll('.filter-btn') || [];
  const sortButtons = document.querySelectorAll('.sort-btn');
  const searchItems = gridContainer.querySelectorAll('.search-item');
  
  // Filter dropdown elements
  const filterDropdownToggle = filterDropdown?.querySelector('[data-filter-dropdown-toggle]');
  const filterDropdownMenu = filterDropdown?.querySelector('[data-filter-dropdown-menu]');
  const filterDropdownArrow = filterDropdown?.querySelector('[data-filter-dropdown-arrow]');
  
  // Sort dropdown elements
  const sortDropdownToggle = sortDropdown?.querySelector('[data-sort-dropdown-toggle]');
  const sortDropdownMenu = sortDropdown?.querySelector('[data-sort-dropdown-menu]');
  const sortDropdownArrow = sortDropdown?.querySelector('[data-sort-dropdown-arrow]');
  const sortLabel = sortDropdown?.querySelector('[data-sort-label]');
  
  let currentFilter = 'all';
  let currentSort = 'relevancy';
  
  // Filter functionality
  function filterSearchResults(filterType) {
    currentFilter = filterType;
    let visibleItems = [];
    
    searchItems.forEach(item => {
      let shouldShow = false;
      const itemType = item.getAttribute('data-item-type');
      
      switch(filterType) {
        case 'all':
          shouldShow = true;
          break;
        case 'product':
          shouldShow = itemType === 'product';
          break;
        case 'article':
          shouldShow = itemType === 'article';
          break;
        case 'page':
          shouldShow = itemType === 'page';
          break;
        case 'sale':
          shouldShow = itemType === 'product' && item.getAttribute('data-product-sale') === 'true';
          break;
        case 'free-shipping':
          shouldShow = itemType === 'product' && item.getAttribute('data-product-free-shipping') === 'true';
          break;
      }
      
      if (shouldShow) {
        item.style.display = 'block';
        item.classList.add('animate-fadeIn');
        visibleItems.push(item);
      } else {
        item.style.display = 'none';
        item.classList.remove('animate-fadeIn');
      }
    });
    
    // Apply current sort to visible items
    sortSearchResults(currentSort, visibleItems);
    
    // Show/hide empty state
    showEmptyState(visibleItems.length === 0);
    
    // Update result counts
    updateResultCounts();
  }
  
  // Sort functionality
  function sortSearchResults(sortType, itemsToSort = null) {
    currentSort = sortType;
    const items = itemsToSort || Array.from(searchItems).filter(item => item.style.display !== 'none');
    
    // Only sort products for price-based sorting
    if (sortType.includes('price')) {
      const products = items.filter(item => item.getAttribute('data-item-type') === 'product');
      const nonProducts = items.filter(item => item.getAttribute('data-item-type') !== 'product');
      
      products.sort((a, b) => {
        switch(sortType) {
          case 'price-low-high':
            return parseInt(a.getAttribute('data-product-price')) - parseInt(b.getAttribute('data-product-price'));
          case 'price-high-low':
            return parseInt(b.getAttribute('data-product-price')) - parseInt(a.getAttribute('data-product-price'));
        }
      });
      
      // Reorder DOM elements - products first, then non-products
      products.forEach(item => gridContainer.appendChild(item));
      nonProducts.forEach(item => gridContainer.appendChild(item));
    } else if (sortType === 'newest') {
      items.sort((a, b) => {
        const aCreated = parseInt(a.getAttribute('data-product-created')) || 0;
        const bCreated = parseInt(b.getAttribute('data-product-created')) || 0;
        return bCreated - aCreated;
      });
      
      items.forEach(item => gridContainer.appendChild(item));
    }
    // For 'relevancy', keep original order (no sorting)
    
    // Update sort label
    const sortLabels = {
      'relevancy': 'Sort by: Relevancy',
      'price-low-high': 'Sort by: Price Low to High',
      'price-high-low': 'Sort by: Price High to Low',
      'newest': 'Sort by: Newest'
    };
    
    if (sortLabel) {
      sortLabel.textContent = sortLabels[sortType] || 'Sort by: Relevancy';
    }
  }
  
  // Update result counts in filter buttons
  function updateResultCounts() {
    const productCount = document.querySelector('[data-product-count]');
    const articleCount = document.querySelector('[data-article-count]');
    const pageCount = document.querySelector('[data-page-count]');
    
    if (productCount) {
      const visibleProducts = Array.from(searchItems).filter(item => 
        item.style.display !== 'none' && item.getAttribute('data-item-type') === 'product'
      ).length;
      productCount.textContent = visibleProducts;
    }
    
    if (articleCount) {
      const visibleArticles = Array.from(searchItems).filter(item => 
        item.style.display !== 'none' && item.getAttribute('data-item-type') === 'article'
      ).length;
      articleCount.textContent = visibleArticles;
    }
    
    if (pageCount) {
      const visiblePages = Array.from(searchItems).filter(item => 
        item.style.display !== 'none' && item.getAttribute('data-item-type') === 'page'
      ).length;
      pageCount.textContent = visiblePages;
    }
  }
  
  // Show empty state when no results match filter
  function showEmptyState(show) {
    let emptyState = gridContainer.querySelector('.empty-state-dynamic');
    
    if (show && !emptyState) {
      emptyState = document.createElement('div');
      emptyState.className = 'empty-state-dynamic col-span-full text-center py-16';
      emptyState.innerHTML = `
        <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
        </svg>
        <h3 class="text-lg font-medium text-gray-900 mb-2">No results found</h3>
        <p class="text-gray-500">Try adjusting your filters to see more results.</p>
        <button class="mt-4 px-4 py-2 bg-etsy-orange text-white rounded-full hover:bg-etsy-orange/90 transition-colors" onclick="document.querySelector('[data-filter=\\"all\\"]')?.click()">
          Show all results
        </button>
      `;
      gridContainer.appendChild(emptyState);
    } else if (!show && emptyState) {
      emptyState.remove();
    }
  }
  
  // Update active filter button
  function updateActiveFilterButton(activeButton) {
    filterButtons.forEach(btn => {
      btn.classList.remove('active', 'bg-etsy-orange', 'text-white');
      btn.classList.add('bg-white', 'border', 'border-gray-300', 'text-gray-700');
    });
    
    activeButton.classList.add('active', 'bg-etsy-orange', 'text-white');
    activeButton.classList.remove('bg-white', 'border', 'border-gray-300', 'text-gray-700');
  }
  
  // Dropdown toggle functionality
  function toggleDropdown(dropdown, arrow) {
    if (!dropdown || !arrow) return;
    
    const isHidden = dropdown.classList.contains('hidden');
    
    if (isHidden) {
      dropdown.classList.remove('hidden');
      arrow.style.transform = 'rotate(180deg)';
    } else {
      dropdown.classList.add('hidden');
      arrow.style.transform = 'rotate(0deg)';
    }
  }
  
  // Handle filter button clicks
  filterButtons.forEach(button => {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      
      const filterType = this.getAttribute('data-filter');
      
      // Update active state
      updateActiveFilterButton(this);
      
      // Filter results
      filterSearchResults(filterType);
      
      // Close dropdown if it's open
      if (filterDropdownMenu && !filterDropdownMenu.classList.contains('hidden')) {
        toggleDropdown(filterDropdownMenu, filterDropdownArrow);
      }
      
      // Add animation to grid
      gridContainer.style.opacity = '0.7';
      setTimeout(() => {
        gridContainer.style.opacity = '1';
      }, 150);
    });
  });
  
  // Handle sort button clicks
  sortButtons.forEach(button => {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      
      const sortType = this.getAttribute('data-sort');
      
      // Sort results
      sortSearchResults(sortType);
      
      // Close dropdown
      if (sortDropdownMenu && !sortDropdownMenu.classList.contains('hidden')) {
        toggleDropdown(sortDropdownMenu, sortDropdownArrow);
      }
      
      // Add animation to grid
      gridContainer.style.opacity = '0.7';
      setTimeout(() => {
        gridContainer.style.opacity = '1';
      }, 150);
    });
  });
  
  // Handle filter dropdown toggle
  if (filterDropdownToggle) {
    filterDropdownToggle.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      
      // Close sort dropdown first
      if (sortDropdownMenu && !sortDropdownMenu.classList.contains('hidden')) {
        toggleDropdown(sortDropdownMenu, sortDropdownArrow);
      }
      
      toggleDropdown(filterDropdownMenu, filterDropdownArrow);
    });
  }
  
  // Handle sort dropdown toggle
  if (sortDropdownToggle) {
    sortDropdownToggle.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      
      // Close filter dropdown first
      if (filterDropdownMenu && !filterDropdownMenu.classList.contains('hidden')) {
        toggleDropdown(filterDropdownMenu, filterDropdownArrow);
      }
      
      toggleDropdown(sortDropdownMenu, sortDropdownArrow);
    });
  }
  
  // Close dropdowns when clicking outside
  document.addEventListener('click', function(e) {
    if (filterDropdown && !filterDropdown.contains(e.target)) {
      if (filterDropdownMenu && !filterDropdownMenu.classList.contains('hidden')) {
        toggleDropdown(filterDropdownMenu, filterDropdownArrow);
      }
    }
    
    if (sortDropdown && !sortDropdown.contains(e.target)) {
      if (sortDropdownMenu && !sortDropdownMenu.classList.contains('hidden')) {
        toggleDropdown(sortDropdownMenu, sortDropdownArrow);
      }
    }
  });
});
</script>

<style>
/* Search Grid Component Styles */
.animate-fadeIn {
  animation: fadeIn 0.5s ease-in-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.search-item {
  transition: all 0.3s ease;
}

.search-item:hover {
  transform: translateY(-2px);
}

[data-search-grid] {
  transition: opacity 0.2s ease;
}

[data-filter-dropdown-arrow], [data-sort-dropdown-arrow] {
  transition: transform 0.2s ease;
}

.filter-btn, .sort-btn {
  transition: all 0.3s ease;
}

.filter-btn:hover, .sort-btn:hover {
  transform: translateY(-1px);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.line-clamp-3 {
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
</style>
