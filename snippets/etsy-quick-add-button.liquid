{% comment %}
  Etsy-style Quick Add Button Component
  Usage: {% render 'etsy-quick-add-button', product: product %}
  
  Parameters:
  - product: The product object
{% endcomment %}

{% assign current_variant = product.selected_or_first_available_variant %}

{% if product.available %}
  <div class="absolute bottom-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
    {% if product.has_only_default_variant %}      <button type="button" 
              class="bg-white hover:bg-etsy-orange text-gray-700 hover:text-white p-2 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-110"
              data-quick-add-btn
              data-product-id="{{ product.id }}"
              data-variant-id="{{ current_variant.id }}"
              aria-label="{{ 'products.product.quick_add' | t }} {{ product.title | escape }}">
        <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
        </svg>
      </button>
    {% else %}      <a href="{{ product.url }}" 
         class="bg-white hover:bg-etsy-orange text-gray-700 hover:text-white p-2 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-110 inline-flex items-center justify-center"
         aria-label="{{ 'products.product.view_product' | t: title: product.title | escape }}">
        <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
        </svg>
      </a>
    {% endif %}
  </div>
{% endif %}

<script>
document.addEventListener('DOMContentLoaded', function() {
  const quickAddButtons = document.querySelectorAll('[data-quick-add-btn]');
  
  quickAddButtons.forEach(button => {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      
      const productId = this.getAttribute('data-product-id');
      const variantId = this.getAttribute('data-variant-id');
      
      // Add loading state
      const originalContent = this.innerHTML;
      this.innerHTML = '<svg class="h-4 w-4 animate-spin" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>';
      this.disabled = true;
      
      // Add to cart via Shopify Ajax API
      fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          id: variantId,
          quantity: 1
        })
      })
      .then(response => response.json())
      .then(data => {
        // Success feedback
        this.innerHTML = '<svg class="h-4 w-4" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" /></svg>';
        this.classList.add('bg-green-500', 'text-white');
        
        // Update cart count if cart drawer exists
        fetch('/cart.js')
          .then(response => response.json())
          .then(cart => {
            const cartCount = document.querySelector('[data-cart-count]');
            if (cartCount) {
              cartCount.textContent = cart.item_count;
              cartCount.classList.add('animate-bounce');
              setTimeout(() => {
                cartCount.classList.remove('animate-bounce');
              }, 1000);
            }
            
            // Trigger cart drawer open if it exists
            const cartDrawerToggle = document.querySelector('[data-cart-drawer-toggle]');
            if (cartDrawerToggle) {
              cartDrawerToggle.click();
            }
          });
        
        // Reset button after 2 seconds
        setTimeout(() => {
          this.innerHTML = originalContent;
          this.classList.remove('bg-green-500', 'text-white');
          this.disabled = false;
        }, 2000);
      })
      .catch(error => {
        console.error('Error adding to cart:', error);
        
        // Error feedback
        this.innerHTML = '<svg class="h-4 w-4" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" /></svg>';
        this.classList.add('bg-red-500', 'text-white');
        
        // Reset button after 2 seconds
        setTimeout(() => {
          this.innerHTML = originalContent;
          this.classList.remove('bg-red-500', 'text-white');
          this.disabled = false;
        }, 2000);
      });
    });
  });
});
</script>

<style>
/* Quick Add Button Styles */
[data-quick-add-btn] {
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
}

[data-quick-add-btn]:hover {
  box-shadow: 0 8px 25px rgba(241, 100, 30, 0.3);
}

.animate-spin {
  animation: spin 1s linear infinite;
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.animate-bounce {
  animation: bounce 1s infinite;
}

@keyframes bounce {
  0%, 20%, 53%, 80%, 100% {
    animation-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000);
    transform: translate3d(0,0,0);
  }
  40%, 43% {
    animation-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060);
    transform: translate3d(0, -8px, 0);
  }
  70% {
    animation-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060);
    transform: translate3d(0, -4px, 0);
  }
  90% {
    transform: translate3d(0, -2px, 0);
  }
}
</style>
